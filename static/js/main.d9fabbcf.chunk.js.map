{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","ActionButton","tweet","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.d9fabbcf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useEffect, useState} from 'react'\r\nimport {loadTweets} from '../lookup'\r\n\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 12323\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n            </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n        </div>\r\n        <TweetsList newTweets={newTweets}/>\r\n    </div>\r\n}\r\n\r\nexport function ActionButton(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-small'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else if (userLike === false) {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div>\r\n            <ActionButton tweet={tweet} action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionButton tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n            <ActionButton tweet={tweet} action={{type: \"retweet\", display: \"Retweet\"}}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() => {\r\n        // do the lookup in the backend\r\n        const myCallback = (response, status) => {\r\n            if (status === 200) {\r\n                setTweetsInit(response)\r\n            } else {\r\n                alert(\"There was an Error\")\r\n            }\r\n        }\r\n        loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n    })\r\n}\r\n","export function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n\r\n    xhr.responseType = \"json\"\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        console.log(e)\r\n        callback({ \"message\": \"The request was an error\" }, 400)\r\n    }\r\n    xhr.send()\r\n}\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Edit <code>src/App.js</code> and save to reload.</p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">Learn React</a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from \"./tweets\";\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        appEl\n    );\n}\nconst tweetsEl = document.getElementById('twitter_clone')\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent/>, tweetsEl);\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}